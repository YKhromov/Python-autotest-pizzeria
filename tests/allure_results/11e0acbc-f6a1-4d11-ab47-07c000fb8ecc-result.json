{"name": "Кейс №1. Проверка добавления товара в корзину с помощью кнопки на главной странице", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\n  (session not created: DevToolsActivePort file doesn't exist)\n  (The process started from chrome location C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nStacktrace:\n\tGetHandleVerifier [0x00007FF622A6EEA2+31554]\n\t(No symbol) [0x00007FF6229E7ED9]\n\t(No symbol) [0x00007FF6228A872A]\n\t(No symbol) [0x00007FF6228E0D2E]\n\t(No symbol) [0x00007FF6228DBB3B]\n\t(No symbol) [0x00007FF622928794]\n\t(No symbol) [0x00007FF622927DF0]\n\t(No symbol) [0x00007FF62291CDD3]\n\t(No symbol) [0x00007FF6228EA33B]\n\t(No symbol) [0x00007FF6228EAED1]\n\tGetHandleVerifier [0x00007FF622D78B1D+3217341]\n\tGetHandleVerifier [0x00007FF622DC5AE3+3532675]\n\tGetHandleVerifier [0x00007FF622DBB0E0+3489152]\n\tGetHandleVerifier [0x00007FF622B1E776+750614]\n\t(No symbol) [0x00007FF6229F375F]\n\t(No symbol) [0x00007FF6229EEB14]\n\t(No symbol) [0x00007FF6229EECA2]\n\t(No symbol) [0x00007FF6229DE16F]\n\tBaseThreadInitThunk [0x00007FFFB9B67374+20]\n\tRtlUserThreadStart [0x00007FFFBB29CC91+33]", "trace": "pytestconfig = <_pytest.config.Config object at 0x000002467A055760>\n\n    @pytest.fixture()\n    def selenium(pytestconfig):\n        logging.info('Prepare browser')\n        service = Service(executable_path=path.join(path.dirname(path.abspath(__file__)), 'chromedriver.exe'))\n        options = ChromeOptions()\n        options.page_load_strategy = pytestconfig.getini('page_load_strategy')\n>       driver = Chrome(service=service, options=options)\n\n..\\src\\fixtures\\system\\browser.py:20: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\miniconda3\\envs\\Final_AT\\lib\\site-packages\\selenium\\webdriver\\chrome\\webdriver.py:45: in __init__\n    super().__init__(\n..\\..\\..\\miniconda3\\envs\\Final_AT\\lib\\site-packages\\selenium\\webdriver\\chromium\\webdriver.py:66: in __init__\n    super().__init__(command_executor=executor, options=options)\n..\\..\\..\\miniconda3\\envs\\Final_AT\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:212: in __init__\n    self.start_session(capabilities)\n..\\..\\..\\miniconda3\\envs\\Final_AT\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:299: in start_session\n    response = self.execute(Command.NEW_SESSION, caps)[\"value\"]\n..\\..\\..\\miniconda3\\envs\\Final_AT\\lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:354: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000002467A7CF520>\nresponse = {'status': 500, 'value': '{\"value\":{\"error\":\"session not created\",\"message\":\"session not created: Chrome failed to sta...07FF6229DE16F]\\\\n\\\\tBaseThreadInitThunk [0x00007FFFB9B67374+20]\\\\n\\\\tRtlUserThreadStart [0x00007FFFBB29CC91+33]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.SessionNotCreatedException: Message: session not created: Chrome failed to start: exited normally.\nE         (session not created: DevToolsActivePort file doesn't exist)\nE         (The process started from chrome location C:\\Program Files\\Google\\Chrome\\Application\\chrome.exe is no longer running, so ChromeDriver is assuming that Chrome has crashed.)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF622A6EEA2+31554]\nE       \t(No symbol) [0x00007FF6229E7ED9]\nE       \t(No symbol) [0x00007FF6228A872A]\nE       \t(No symbol) [0x00007FF6228E0D2E]\nE       \t(No symbol) [0x00007FF6228DBB3B]\nE       \t(No symbol) [0x00007FF622928794]\nE       \t(No symbol) [0x00007FF622927DF0]\nE       \t(No symbol) [0x00007FF62291CDD3]\nE       \t(No symbol) [0x00007FF6228EA33B]\nE       \t(No symbol) [0x00007FF6228EAED1]\nE       \tGetHandleVerifier [0x00007FF622D78B1D+3217341]\nE       \tGetHandleVerifier [0x00007FF622DC5AE3+3532675]\nE       \tGetHandleVerifier [0x00007FF622DBB0E0+3489152]\nE       \tGetHandleVerifier [0x00007FF622B1E776+750614]\nE       \t(No symbol) [0x00007FF6229F375F]\nE       \t(No symbol) [0x00007FF6229EEB14]\nE       \t(No symbol) [0x00007FF6229EECA2]\nE       \t(No symbol) [0x00007FF6229DE16F]\nE       \tBaseThreadInitThunk [0x00007FFFB9B67374+20]\nE       \tRtlUserThreadStart [0x00007FFFBB29CC91+33]\n\n..\\..\\..\\miniconda3\\envs\\Final_AT\\lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: SessionNotCreatedException"}, "attachments": [{"name": "log", "source": "60dd032a-dba8-4a81-a228-bdbfa4e0285d-attachment.txt", "type": "text/plain"}], "start": 1721369261160, "stop": 1721369261160, "uuid": "6dcba0da-6d93-4075-b5b4-ee11b196e98d", "historyId": "b6686fdf53639163d0b4349fe6cd9e79", "testCaseId": "b6686fdf53639163d0b4349fe6cd9e79", "fullName": "tests.pizzeria.test_pizzeria.TestPractice#test_case_1", "labels": [{"name": "feature", "value": "Проект по автоматизации тестирования сайта Pizzeria на Python"}, {"name": "parentSuite", "value": "tests.pizzeria"}, {"name": "suite", "value": "test_pizzeria"}, {"name": "subSuite", "value": "TestPractice"}, {"name": "host", "value": "DESKTOP-D7U0JT2"}, {"name": "thread", "value": "9700-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.pizzeria.test_pizzeria"}]}