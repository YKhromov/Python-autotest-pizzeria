{"name": "Кейс №1. Проверка добавления товара в корзину с помощью кнопки на главной странице", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test_pizzeria.TestPractice object at 0x00000212048D3310>\nselenium = <selenium.webdriver.chrome.webdriver.WebDriver (session=\"b02d88c0880574c2ea7d4133c5ebe1d4\")>\nwait_element = <function wait_element.<locals>.callback at 0x00000212049E7430>\ngo_to_url = <function go_to_url.<locals>.callback at 0x00000212049E7820>\nhover_element = <function hover_element.<locals>.callback at 0x00000212049E79D0>\nwait_and_click = <function wait_and_click.<locals>.callback at 0x00000212049E7B80>\nwait_elements = <function wait_elements.<locals>.callback at 0x00000212049E7D30>\n\n    @allure.title('Кейс №1. Проверка добавления товара в корзину с помощью кнопки на главной странице')\n    def test_case_1(self, selenium, wait_element, go_to_url, hover_element, wait_and_click, wait_elements):\n        go_to_url('https://pizzeria.skillbox.cc/')\n        pizza_on_screen = wait_elements(\n            By.XPATH, './/li[contains(@class, \"span3 wow flipInY  slick-slide slick-active\")]')\n        with allure.step('Выбор случайной пиццы'):\n            pizza_num = randint(1, len(pizza_on_screen))\n            chosen_pizza = wait_element(\n                By.XPATH,\n                f'.//li[contains(@class, \"span3 wow flipInY  slick-slide slick-active\")][{pizza_num}]'\n            )\n        with allure.step('Добавление выбранной пиццы в корзину'):\n            hover_element(chosen_pizza)\n            expected_pizza = chosen_pizza.find_element(By.XPATH, './descendant::h3') \\\n                .get_attribute('textContent')\n            expected_sum = chosen_pizza.find_element(By.XPATH, './descendant::span/span') \\\n                .get_attribute('textContent')\n>           wait_and_click(\n                By.XPATH,\n                f'.//li[contains(@class, \"span3 wow flipInY  slick-slide slick-active\")][{pizza_num}]/*/a[2]')\n\npizzeria\\test_pizzeria.py:42: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\src\\actions\\wait.py:31: in callback\n    return WebDriverWait(selenium, timeout=30).until(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"b02d88c0880574c2ea7d4133c5ebe1d4\")>\nmethod = <function element_to_be_clickable.<locals>._predicate at 0x0000021204B0EC10>\nmessage = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\nC:\\Users\\Dell\\miniconda3\\envs\\Final_AT\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "steps": [{"name": "Ожидание загрузки страницы 'https://pizzeria.skillbox.cc/'", "status": "passed", "parameters": [{"name": "value", "value": "'https://pizzeria.skillbox.cc/'"}], "start": 1722932452614, "stop": 1722932453431}, {"name": "Ожидание элементов по 'xpath' со значением './/li[contains(@class, \"span3 wow flipInY  slick-slide slick-active\")]'", "status": "passed", "parameters": [{"name": "by", "value": "'xpath'"}, {"name": "value", "value": "'.//li[contains(@class, \"span3 wow flipInY  slick-slide slick-active\")]'"}], "start": 1722932453431, "stop": 1722932453448}, {"name": "Выбор случайной пиццы", "status": "passed", "steps": [{"name": "Ожидание элемента по 'xpath' со значением './/li[contains(@class, \"span3 wow flipInY  slick-slide slick-active\")][4]'", "status": "passed", "parameters": [{"name": "by", "value": "'xpath'"}, {"name": "value", "value": "'.//li[contains(@class, \"span3 wow flipInY  slick-slide slick-active\")][4]'"}], "start": 1722932453448, "stop": 1722932453473}], "start": 1722932453448, "stop": 1722932453473}, {"name": "Добавление выбранной пиццы в корзину", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"C:\\Users\\Dell\\skillbox\\git\\python-autotests-basic\\Autotest_final\\tests\\pizzeria\\test_pizzeria.py\", line 42, in test_case_1\n    wait_and_click(\n  File \"C:\\Users\\Dell\\miniconda3\\envs\\Final_AT\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Dell\\skillbox\\git\\python-autotests-basic\\Autotest_final\\src\\actions\\wait.py\", line 31, in callback\n    return WebDriverWait(selenium, timeout=30).until(\n  File \"C:\\Users\\Dell\\miniconda3\\envs\\Final_AT\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "steps": [{"name": "Наведение курсора на <selenium.webdriver.remote.webelement.WebElement (session=\"b02d88c0880574c2ea7d4133c5ebe1d4\", element=\"f.0C7E03CE4B8296FE847F009EC3FDE377.d.344C38A4B89120747B2A90253A665D39.e.19\")>", "status": "passed", "parameters": [{"name": "element", "value": "<selenium.webdriver.remote.webelement.WebElement (session=\"b02d88c0880574c2ea7d4133c5ebe1d4\", element=\"f.0C7E03CE4B8296FE847F009EC3FDE377.d.344C38A4B89120747B2A90253A665D39.e.19\")>"}], "start": 1722932453473, "stop": 1722932453758}, {"name": "Ожидание и нажатие на элемент по 'xpath' со значением './/li[contains(@class, \"span3 wow flipInY  slick-slide slick-active\")][4]/*/a[2]'", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \n\n", "trace": "  File \"C:\\Users\\Dell\\miniconda3\\envs\\Final_AT\\lib\\site-packages\\allure_commons\\_allure.py\", line 192, in impl\n    return func(*a, **kw)\n  File \"C:\\Users\\Dell\\skillbox\\git\\python-autotests-basic\\Autotest_final\\src\\actions\\wait.py\", line 31, in callback\n    return WebDriverWait(selenium, timeout=30).until(\n  File \"C:\\Users\\Dell\\miniconda3\\envs\\Final_AT\\lib\\site-packages\\selenium\\webdriver\\support\\wait.py\", line 105, in until\n    raise TimeoutException(message, screen, stacktrace)\n"}, "parameters": [{"name": "by", "value": "'xpath'"}, {"name": "value", "value": "'.//li[contains(@class, \"span3 wow flipInY  slick-slide slick-active\")][4]/*/a[2]'"}], "start": 1722932453844, "stop": 1722932484011}], "start": 1722932453473, "stop": 1722932484013}], "attachments": [{"name": "log", "source": "f9624a9b-2874-4160-a235-e2704797406c-attachment.txt", "type": "text/plain"}], "start": 1722932452614, "stop": 1722932484014, "uuid": "43d998f0-9230-4844-bc7b-2827cc801c2e", "historyId": "b6686fdf53639163d0b4349fe6cd9e79", "testCaseId": "b6686fdf53639163d0b4349fe6cd9e79", "fullName": "tests.pizzeria.test_pizzeria.TestPractice#test_case_1", "labels": [{"name": "feature", "value": "Проект по автоматизации тестирования сайта Pizzeria на Python"}, {"name": "parentSuite", "value": "tests.pizzeria"}, {"name": "suite", "value": "test_pizzeria"}, {"name": "subSuite", "value": "TestPractice"}, {"name": "host", "value": "DESKTOP-D7U0JT2"}, {"name": "thread", "value": "6168-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.pizzeria.test_pizzeria"}]}